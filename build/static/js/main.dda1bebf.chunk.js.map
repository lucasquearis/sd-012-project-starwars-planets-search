{"version":3,"sources":["media/star-wars-logo.png","context/FilterContext.js","components/Table.jsx","components/InputComponents/Button.jsx","components/InputComponents/InputNameAndValue.jsx","components/InputComponents/RadioInput.jsx","components/InputComponents/Select.jsx","components/InputComponents/Input.jsx","services/Api.js","hooks/useData.js","context/Provider.js","components/FilteredList.jsx","components/Header.jsx","App.js","index.js"],"names":["module","exports","FilterContext","createContext","Table","planets","useContext","length","resultsWithoutResidents","Object","keys","filter","item","className","map","key","planet","name","result","data-testid","Button","testid","onClick","title","type","InputNameAndValue","valueForm","id","onChange","htmlFor","value","RadioInput","Select","array","Input","useState","nameInput","setNameInput","column","comparison","valuesForm","setValueForms","sort","sortOrder","setSortOrder","setFilterNameProvider","setValuesFormProvider","valuesFormProvider","columnOptions","setOrderedPlanets","handleChange","target","useEffect","handleChangeSort","sortedPlanets","a","b","getPlanets","fetch","json","results","useData","data","setData","resultSort","localeCompare","console","log","fetchPlanets","Provider","children","filterNameProvider","setColumnOptions","setPlanets","arrayFiltersSelected","setArrayFiltersSelected","orderedPlanets","arrayFiltered","toLowerCase","includes","forEach","filterArrayPlanets","arrayOptions","filtredArrayOptions","option","context","filters","filterByName","filterByNumericValues","order","short","FilteredList","removeFilter","fil","handleClick","Header","src","hero","alt","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dda1bebf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.f5bdff62.png\";","import { createContext } from 'react';\n\nconst FilterContext = createContext([]);\n\nexport default FilterContext;\n","import React, { useContext } from 'react';\nimport FilterContext from '../context/FilterContext';\nimport './table.css';\n\nfunction Table() {\n  const { planets } = useContext(FilterContext);\n  if (planets.length > 0) {\n    const resultsWithoutResidents = Object.keys(planets[0])\n      .filter((item) => item !== 'residents');\n    // Aprendi a fazer a table com o Jossany e David Gonzaga!!\n    return (\n      <div>\n        <table className=\"table table-dark table-striped\">\n          <thead>\n            <tr>\n              {resultsWithoutResidents.map((key) => <th key={ key }>{ key }</th>)}\n            </tr>\n          </thead>\n          <tbody>\n            {planets.map((planet) => (\n              <tr key={ planet.name }>\n                {resultsWithoutResidents.map((result) => (\n                  <td\n                    data-testid={ result === 'name' ? 'planet-name' : '' }\n                    key={ planet[result] }\n                  >\n                    {planet[result]}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  return (<h1>Nothing...</h1>);\n}\n\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ testid, onClick, title }) => (\n  <button\n    className=\"btn btn-outline-warning\"\n    type=\"button\"\n    data-testid={ testid }\n    onClick={ onClick }\n  >\n    { title }\n  </button>\n);\n\nButton.propTypes = {\n  testid: PropTypes.string,\n  onClick: PropTypes.func,\n  title: PropTypes.string,\n}.isRequired;\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst InputNameAndValue = ({\n  valueForm,\n  type,\n  title,\n  id,\n  name,\n  testid,\n  onChange,\n}) => (\n  <label htmlFor=\"filterByName\">\n    { title }\n    <input\n      className=\"form-control\"\n      type={ type }\n      value={ valueForm }\n      id={ id }\n      name={ name }\n      data-testid={ testid }\n      onChange={ onChange }\n    />\n  </label>\n);\n\nInputNameAndValue.propTypes = {\n  setNameInput: PropTypes.func,\n  valueForm: PropTypes.string,\n  title: PropTypes.string,\n}.isRequired;\n\nexport default InputNameAndValue;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RadioInput = ({ id, title, testid, onChange }) => (\n  <label className=\"form-check-label\" htmlFor={ id }>\n    { title }\n    <input\n      name=\"sort\"\n      id={ id }\n      data-testid={ testid }\n      type=\"radio\"\n      value={ id }\n      onChange={ onChange }\n    />\n  </label>\n);\n\nRadioInput.propTypes = {\n  id: PropTypes.string,\n  title: PropTypes.string,\n  testid: PropTypes.string,\n  onChange: PropTypes.func,\n}.isRequired;\n\nexport default RadioInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Select = ({ testid, value, id, onChange, array, title, name }) => (\n  <label htmlFor={ testid }>\n    { title }\n    <select\n      name={ name }\n      data-testid={ testid }\n      value={ value }\n      id={ id }\n      onChange={ onChange }\n    >\n      {array.map((item) => <option key={ item }>{ item }</option>)}\n    </select>\n  </label>\n);\n\nSelect.propTypes = {\n  testid: PropTypes.string,\n  value: PropTypes.string,\n  id: PropTypes.string,\n  onChange: PropTypes.func,\n  array: PropTypes.array,\n  htmlFor: PropTypes.string,\n  title: PropTypes.string,\n}.isRequired;\n\nexport default Select;\n","import React, { useState, useContext, useEffect } from 'react';\nimport FilterContext from '../../context/FilterContext';\nimport Button from './Button';\nimport InputNameAndValue from './InputNameAndValue';\nimport RadioInput from './RadioInput';\nimport Select from './Select';\nimport './input.css';\n\nconst Input = () => {\n  const comparisionOptions = ['maior que', 'menor que', 'igual a'];\n  const [nameInput, setNameInput] = useState('');\n  const [valuesForm, setValueForms] = useState(\n    { column: 'population', comparison: 'maior que', value: '100000' },\n  );\n  const [sortOrder, setSortOrder] = useState({\n    column: '',\n    sort: '',\n  });\n  const {\n    setFilterNameProvider,\n    setValuesFormProvider,\n    valuesFormProvider,\n    columnOptions,\n    planets,\n    setOrderedPlanets,\n  } = useContext(FilterContext);\n  const defaultOptions = ['population', 'orbital_period',\n    'diameter', 'rotation_period', 'surface_water'];\n\n  const handleChangeName = ({ target: { value } }) => {\n    setNameInput(value);\n  };\n\n  const handleChange = ({ target: { value, id } }) => {\n    switch (id) {\n    case 'column-filter':\n      setValueForms(\n        { ...valuesForm, column: value },\n      );\n      break;\n    case 'comparison-filter':\n      setValueForms(\n        { ...valuesForm, comparison: value },\n      );\n      break;\n    case 'value-filter':\n      setValueForms(\n        { ...valuesForm, value },\n      );\n      break;\n    default:\n      break;\n    }\n  };\n\n  useEffect(() => {\n    setFilterNameProvider(nameInput);\n  }, [nameInput, setFilterNameProvider]);\n\n  const handleClick = () => {\n    setValuesFormProvider([...valuesFormProvider, valuesForm]);\n  };\n\n  const handleSort = () => {\n    const { sort, column } = sortOrder;\n    if (sort && column) {\n      const sortedPlanets = [...planets];\n      sortedPlanets.sort((a, b) => {\n        if (sort === 'ASC') return a[column] - b[column];\n        if (sort === 'DESC') return b[column] - a[column];\n        return false;\n      });\n      setOrderedPlanets(sortedPlanets);\n    }\n  };\n\n  const handleChangeSort = ({\n    target: { name, value } }) => (name === 'column' ? setSortOrder(\n    {\n      ...sortOrder,\n      column: value,\n    },\n  ) : setSortOrder(\n    {\n      ...sortOrder,\n      sort: value,\n    },\n  ));\n\n  return (\n    <div className=\"forms-container mb-3\">\n      <form className=\"row g-3\">\n        <div className=\"col-auto\">\n          <InputNameAndValue\n            valueForm={ valuesForm.nameInput }\n            title=\"Filter:\"\n            id=\"filterByName\"\n            name=\"name\"\n            testid=\"name-filter\"\n            onChange={ handleChangeName }\n          />\n        </div>\n        <div className=\"col-auto\">\n          <Select\n            title=\"Select Column:\"\n            testid=\"column-filter\"\n            value={ valuesForm.column }\n            id=\"column-filter\"\n            onChange={ handleChange }\n            array={ columnOptions }\n          />\n        </div>\n        <div className=\"col-auto\">\n          <Select\n            title=\"Comparison:\"\n            testid=\"comparison-filter\"\n            value={ valuesForm.comparison }\n            id=\"comparison-filter\"\n            onChange={ handleChange }\n            array={ comparisionOptions }\n          />\n        </div>\n        <div className=\"col-auto\">\n          <InputNameAndValue\n            valueForm={ valuesForm.value }\n            type=\"number\"\n            title=\"Value:\"\n            id=\"value-filter\"\n            testid=\"value-filter\"\n            onChange={ handleChange }\n          />\n        </div>\n        <div className=\"col-auto\">\n          <br />\n          <Button\n            testid=\"button-filter\"\n            onClick={ handleClick }\n            title=\"Add Filter\"\n          />\n        </div>\n      </form>\n      <form className=\"row g-3\">\n        <div className=\"col-auto\">\n          <Select\n            testid=\"column-sort\"\n            onChange={ handleChangeSort }\n            array={ defaultOptions }\n            title=\"Sort by: \"\n            name=\"column\"\n          />\n        </div>\n        <div className=\"col-auto\">\n          <RadioInput\n            id=\"ASC\"\n            title=\"ascending order\"\n            testid=\"column-sort-input-asc\"\n            onChange={ handleChangeSort }\n          />\n        </div>\n        <div className=\"col-auto\">\n          <RadioInput\n            id=\"DESC\"\n            title=\"descending order\"\n            testid=\"column-sort-input-desc\"\n            onChange={ handleChangeSort }\n          />\n        </div>\n        <div className=\"col-auto\">\n          <br />\n          <Button\n            testid=\"column-sort-button\"\n            onClick={ handleSort }\n            title=\"Sort\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Input;\n","const getPlanets = async () => {\n  const URL_API = 'https://swapi-trybe.herokuapp.com/api/planets/';\n  const result = await fetch(URL_API);\n  const { results } = await result.json();\n  return results;\n};\n\nexport default getPlanets;\n","import { useEffect, useState } from 'react';\nimport getPlanets from '../services/Api';\n\nconst useData = () => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchPlanets = async () => {\n      const result = await getPlanets();\n      const resultSort = [...result]\n        .sort(({ name: a }, { name: b }) => a.localeCompare(b));\n      setData(resultSort);\n      console.log('api chamou');\n    };\n    fetchPlanets();\n  }, []);\n  return [data];\n};\n\nexport default useData;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport FilterContext from './FilterContext';\nimport useData from '../hooks/useData';\n\nconst Provider = ({ children }) => {\n  const [filterNameProvider, setFilterNameProvider] = useState('');\n  const [valuesFormProvider, setValuesFormProvider] = useState([]);\n  const [columnOptions, setColumnOptions] = useState(['population', 'orbital_period',\n    'diameter', 'rotation_period', 'surface_water']);\n  const [planets, setPlanets] = useState([]);\n  const [data] = useData();\n  const [arrayFiltersSelected, setArrayFiltersSelected] = useState([]);\n  const [orderedPlanets, setOrderedPlanets] = useState([]);\n\n  useEffect(() => {\n    if (data) {\n      let arrayFiltered = [...data];\n      arrayFiltered = arrayFiltered.filter(({ name }) => name.toLowerCase()\n        .includes(filterNameProvider.toLowerCase()));\n      setPlanets(arrayFiltered);\n    }\n  }, [data, filterNameProvider]);\n\n  useEffect(() => {\n    const orderPlanets = () => {\n      setPlanets(orderedPlanets);\n    };\n    orderPlanets();\n  }, [orderedPlanets]);\n\n  useEffect(() => {\n    const filterArrayPlanets = () => {\n      if (data && valuesFormProvider) {\n        let arrayFiltered = [...data];\n        valuesFormProvider.forEach(({ column, comparison, value }) => {\n          switch (comparison) {\n          case 'maior que':\n            arrayFiltered = arrayFiltered.filter((planet) => (\n              +planet[column] > +value\n            ));\n            break;\n          case 'menor que':\n            arrayFiltered = arrayFiltered.filter((planet) => (\n              +planet[column] < +value\n            ));\n            break;\n          case 'igual a':\n            arrayFiltered = arrayFiltered.filter((planet) => (\n              +planet[column] === +value\n            ));\n            break;\n          default:\n            break;\n          }\n        });\n        setPlanets(arrayFiltered);\n      }\n    };\n    filterArrayPlanets();\n  }, [data, valuesFormProvider]);\n\n  useEffect(() => {\n    const options = ['population', 'orbital_period',\n      'diameter', 'rotation_period', 'surface_water'];\n    const arrayOptions = valuesFormProvider.map(({ column }) => column);\n    const filtredArrayOptions = options\n      .filter((option) => !arrayOptions.includes(option));\n    setColumnOptions(filtredArrayOptions);\n    setArrayFiltersSelected(arrayOptions);\n  }, [valuesFormProvider]);\n\n  const context = {\n    setFilterNameProvider,\n    setValuesFormProvider,\n    setOrderedPlanets,\n    valuesFormProvider,\n    planets,\n    columnOptions,\n    arrayFiltersSelected,\n    filters: {\n      filterByName: {\n        name: filterNameProvider,\n      },\n      filterByNumericValues: valuesFormProvider,\n      order: {\n        column: 'Name',\n        short: 'ASC',\n      },\n    },\n  };\n\n  return (\n    <FilterContext.Provider value={ context }>\n      { children }\n    </FilterContext.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport default Provider;\n","import React, { useContext } from 'react';\nimport FilterContext from '../context/FilterContext';\n\nconst FilteredList = () => {\n  const {\n    arrayFiltersSelected,\n    valuesFormProvider,\n    setValuesFormProvider,\n  } = useContext(FilterContext);\n\n  const handleClick = (option) => {\n    const removeFilter = valuesFormProvider.filter((fil) => fil.column !== option);\n    setValuesFormProvider(removeFilter);\n  };\n\n  return (\n    <>\n      <h3>Filtred Options: </h3>\n      <ul>\n        { arrayFiltersSelected.map((option) => (\n          <li key={ option } data-testid=\"filter\">\n            <button\n              onClick={ () => handleClick(option) }\n              type=\"button\"\n            >\n              x\n            </button>\n            { option }\n          </li>\n        )) }\n      </ul>\n    </>\n  );\n};\n\nexport default FilteredList;\n","import React from 'react';\nimport hero from '../media/star-wars-logo.png';\nimport './header.css';\n\nconst Header = () => (\n  <div className=\"header-container\">\n    <div className=\"header-hero\">\n      <img className=\"hero\" src={ hero } alt=\"star-wars-logo\" />\n    </div>\n    <div className=\"header-text\">\n      <p>Find your destination, search your planet, all planets in one place.</p>\n    </div>\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport Input from './components/InputComponents/Input';\nimport Provider from './context/Provider';\nimport FilteredList from './components/FilteredList';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <Provider>\n      <Header />\n      <Input />\n      <FilteredList />\n      <Table />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}